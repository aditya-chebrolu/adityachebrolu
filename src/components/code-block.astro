---
interface Props {
  description: string | string[];
  codeHtml?: string;
}

const { description, codeHtml } = Astro.props;
---

<style>
  .box {
    border: solid 1.5px #343841;
  }

  .description {
    display: flex;
    flex-direction: column;
    gap: 10px;
    padding: 8px;
    font-size: 14px;
    color: #c0c0c0;
    background-color: #17181c;
    border-bottom: solid 1.5px #343841;
    > div > .highlighted {
      color: #318ce7;
    }
  }

  .code {
    font-size: 14px;
    color: #dbdbdb;
    padding: 6px 8px;
    overflow-x: auto;
    line-height: 22px;
    background-color: #0d0d0f;

    figure,
    pre {
      margin: 0;
    }
  }

  @media (min-width: 900px) {
    .description {
      font-size: 15px;
      padding: 10px 15px;
    }
    .code {
      padding: 10px 15px;
      line-height: 24px;
    }
    .code::-webkit-scrollbar {
      width: 4px;
      height: 4px;
    }
    .code::-webkit-scrollbar-thumb {
      background: #343841;
    }
    .code::-webkit-scrollbar-track {
      background: #0d0d0f;
    }
  }
</style>
<div class="box">
  <div class="description">
    {typeof description === "string" && <div>{description}</div>}
    {
      typeof description === "object" &&
        description.map((desc) => <div set:html={desc} />)
    }
  </div>
  {codeHtml && <div class="code" set:html={codeHtml} />}
</div>
